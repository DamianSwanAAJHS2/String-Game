# -*- coding: utf-8 -*-
"""stringgame.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fdFFawR_IrMSTyBJWoTG_tInY1hYCtDK
"""

#@title **(Hidden)** {display-mode: "form"}

import random
import string
import time

#score wip
global score
global hits
global wrongans
global correctans
global skip
global perfectans
perfectans = 0
wrongans = 0
correctans = 0
skip = 0
hits = 0
def addperfectans(perfect):
  global perfectans
  perfectans += perfect
def addskip(skips):
  global skip
  skip += skips
def addcorrect(correct):
  global correctans
  correctans += correct
def addhit(hit):
  global hits
  global wrongans
  hits += hit
  wrongans += hit
def resethit():
  global hits
  hits = 0
score = 0
def addscore(toadd):
  global score
  score += toadd
def removescore(toremove):
  global score
  score -= toremove
def rsg(autogen): 

  joinchar = ''
  if autogen == 1:
    num = input("Length Of String:")
  if autogen == 1 and str.isdigit(num) == False:
    print("[🛑] INVALID RESPONCE [🛑]")
    exit
  if autogen == 1 and str.isdigit(num) == True:
    num = int(num)
    output_string = joinchar.join(random.SystemRandom().choice(string.ascii_letters + string.digits) for _ in range(num)); print(output_string)
  if autogen == 0:
    print("[🛎️] Skipping jumble... [🛎️]")
    return 
#  if str.isdigit(num) == False:
 #   print("[🛑] INVALID RESPONCE [🛑]")
 #   exit
 # elif str.isdigit(num) == True:
 #     num = int(num)
 #     output_string = joinchar.join(random.SystemRandom().choice(string.ascii_letters + string.digits) for _ in range(num)); print(output_string)


WORDS = ("python", "jumble", "easy", "difficult", "answer",  "xylophone", "funny", "cat", "dog", "words", "a",
"ability",
"able",
"about",
"above",
"accept",
"according",
"account",
"across",
"act",
"action",
"activity",
"actually",
"add",
"address",
"administration",
"admit",
"adult",
"affect",
"after",
"again",
"against",
"age",
"agency",
"agent",
"ago",
"agree",
"agreement",
"ahead",
"air",
"all",
"allow",
"almost",
"alone",
"along",
"already",
"also",
"although",
"always",
"American",
"among",
"amount",
"analysis",
"and",
"animal",
"another",
"answer",
"any",
"anyone",
"anything",
"appear",
"apply",
"approach",
"area",
"argue",
"arm",
"around",
"arrive",
"art",
"article",
"artist",
"as",
"ask",
"assume",
"at",
"attack",
"attention",
"attorney",
"audience",
"author",
"authority",
"available",
"avoid",
"away",
"baby",
"back",
"bad",
"bag",
"ball",
"bank",
"bar",
"base",
"be",
"beat",
"beautiful",
"because",
"become",
"bed",
'before',
'begin',
'behavior',
'behind',
'believe',
'benefit',
'best',
'better',
'between',
'beyond',
'big',
'bill',
'billion',
'bit',
'black',
'blood',
'blue',
'board',
'body',
'book',
'born',
'both',
'box',
'boy',
'break',
'bring',
'brother',
'budget',
'build',
'building',
'business',
'but',
'buy',
'by',
'call',
'camera',
'campaign',
'can',
'cancer',
'candidate',
'capital',
'car',
'card',
'care',
'career',
'carry',
'case',
'catch',
'cause',
'cell',
'center',
'central',
'century',
'certain',
'certainly',
'chair',
'challenge',
'chance',
'change',
'character',
'charge',
'check',
'child',
'choice',
'choose',
'church',
'citizen',
'city',
'civil',
'claim',
'class',
'clear',
'clearly',
'close',
'coach',
'cold',
'collection',
'college',
'color',
'come',
'commercial',
'common',
'community',
'company',
'compare',
'computer',
'concern',
'condition',
'conference',
'congress',
'consider',
'consumer',
'contain',
'continue',
'control',
'cost',
'could',
'country',
'couple',
'course',
'court',
'cover',
'create',
'crime',
'cultural',
'culture',
'cup',
'current',
'customer',
'cut',
'dark',
'data',
'daughter',
'day',
'dead',
'deal',
'death',
'debate',
'decade',
'decide',
'decision',
'deep',
'defense',
'degree',
'Democrat',
'democratic',
'describe',
'design',
'despite',
'detail',
'determine',
'develop',
'development',
'die',
'difference',
'different',
'difficult',
'dinner',
'direction',
'director',
'discover',
'discuss',
'discussion',
'disease',
'do',
'doctor',
'dog',
'door',
'down',
'draw',
'dream',
'drive',
'drop',
'drug',
'during',
'each',
'early',
'east',
'easy',
'eat',
'economic',
'economy',
'edge',
'education',
'effect',
'effort',
'eight',
'either',
'election',
'else',
'professional',
'professor',
'program',
'project',
'property',
'protect',
'prove',
'provide',
'public',
'pull',
'purpose',
'push',
'put',
'quality',
'question',
'quickly',
'quite',
'race',
'radio',
'raise',
'range',
'rate',
'rather',
'reach',
'read',
'ready',
'real',
'reality',
'realize',
'really',
'reason',
'receive',
'recent',
'recently',
'recognize',
'record',
'red',
'reduce',
'reflect',
'region',
'relate',
'relationship',
'religious',
'remain',
'remember',
'remove',
'report',
'represent',
'Republican',
'require',
'research',
'resource',
'respond',
'response',
'responsibility'

)
for yes in WORDS:
  word = random.choice(WORDS)
  correct = word
  jumble = ""
  while word:
    position = random.randrange(len(word))
    jumble += word[position]
    word = word[:position] + word[(position + 1):]
  print(
  """
       𝙐𝙣𝙨𝙘𝙧𝙖𝙢𝙗𝙡𝙚 𝙩𝙝𝙚 𝙡𝙚𝙩𝙩𝙚𝙧𝙨 𝙩𝙤 𝙢𝙖𝙠𝙚 𝙖 𝙬𝙤𝙧𝙙.
        (𝙩𝙮𝙥𝙚 !𝙘𝙤𝙢 𝙖𝙩 𝙩𝙝𝙚 𝙥𝙧𝙤𝙢𝙥𝙩 𝙛𝙤𝙧 𝙘𝙤𝙢𝙢𝙖𝙣𝙙𝙨)
       """
       )
  print("𝘛𝘩𝘦 𝘫𝘶𝘮𝘣𝘭𝘦 𝘪𝘴:", jumble)
  guess = input("𝗬𝗼𝘂𝗿 𝗚𝘂𝗲𝘀𝘀:")
  while guess !=correct and guess != "!quit" and guess != "!rsg" and guess != "!com" and guess != "!eval" and guess !="!skip" and guess != "!score" and guess != "!eval" and guess != "!stats":
      print("[❌] Incorrect [❌]")
      addhit(1)
      print(hits)
      guess = input("Your guess: ")
      if hits == 3:
        resethit()
        removescore(1)
        print("[🛑] Failed [🛑]")
        time.sleep(4)
        guess == "!skip"
        break
  if guess == correct:
      print("[✅] correct! [✅]\n")
      addcorrect(1)
      if hits == 1:
        addscore(0.5)
      if hits == 2:
        addscore(0.5)
      if hits == 0:
        addperfectans(1)
        addscore(1)
  stringscore = "Points: {}".format(score)
  print(stringscore)
  print("[⏲️] Loading... [⏲️]")
  time.sleep(4)
  if guess == "!com":
    print("L̲i̲s̲t̲ ̲o̲f̲ ̲c̲o̲m̲m̲a̲n̲d̲s̲")
    print("!quit - quits the game")
    print("!rsg - random string gen")
    print("!skip - skip question (in game)")
    print("!stats - shows stats")
    print("-----End List-----")
    time.sleep(4)
    print("[📌] Returning to game... [📌]")
  if guess == "!quit":
    print("[⚠️] Exit Command Recived Quitting... [⚠️]")
    print("[ℹ️] Press the play button to start again! [ℹ️]")
    print("---END GAME---")
    break;
  if guess == "!rsg":
    rsg(1)
    time.sleep(4)
    print("[📌] Returning to game... [📌]")
  if guess == "!eval":
    toeval = input("[⚠️] DANGER! Code to eval:")
    eval(toeval)
    time.sleep(4)
    print("[📌] Returning to game... [📌]")
  if guess == "!skip":
    addskip(1)
    rsg(0)
  if guess == "!stats":
    wronganswers = "Wrong Guesses: {}".format(wrongans)
    correctanswers = "Correct Guesses: {}".format(correctans)
    skipsused = "Skips Used: {}".format(skip)
    currentscore = "Current Score: {}".format(score)
    perfectanswers = "Guesses First Try: {}".format(perfectans)
    print("[📝] Score Board [📝]")
    print(currentscore)
    print(skipsused)
    print(perfectanswers)
    print(correctanswers)
    print(wronganswers)
    print("--end score board---")
    time.sleep(4)
    print("[📌] Returning to game... [📌]")

"""Github: [Click me](https://github.com/DamianSwanAAJHS2/String-Game)

Gitpage: [Click me](https://app.gitbook.com/@damian-swan36/s/stringgame/)
"""